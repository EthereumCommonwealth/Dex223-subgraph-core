// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AssetRemoved extends ethereum.Event {
  get params(): AssetRemoved__Params {
    return new AssetRemoved__Params(this);
  }
}

export class AssetRemoved__Params {
  _event: AssetRemoved;

  constructor(event: AssetRemoved) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Liquidation extends ethereum.Event {
  get params(): Liquidation__Params {
    return new Liquidation__Params(this);
  }
}

export class Liquidation__Params {
  _event: Liquidation;

  constructor(event: Liquidation) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get feeReceiver(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class MarginSwap extends ethereum.Event {
  get params(): MarginSwap__Params {
    return new MarginSwap__Params(this);
  }
}

export class MarginSwap__Params {
  _event: MarginSwap;

  constructor(event: MarginSwap) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get assetIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewAsset extends ethereum.Event {
  get params(): NewAsset__Params {
    return new NewAsset__Params(this);
  }
}

export class NewAsset__Params {
  _event: NewAsset;

  constructor(event: NewAsset) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OrderAliveStatus extends ethereum.Event {
  get params(): OrderAliveStatus__Params {
    return new OrderAliveStatus__Params(this);
  }
}

export class OrderAliveStatus__Params {
  _event: OrderAliveStatus;

  constructor(event: OrderAliveStatus) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get alive(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OrderCollateralsSet extends ethereum.Event {
  get params(): OrderCollateralsSet__Params {
    return new OrderCollateralsSet__Params(this);
  }
}

export class OrderCollateralsSet__Params {
  _event: OrderCollateralsSet;

  constructor(event: OrderCollateralsSet) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get collaterals(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get baseAsset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get whitelistId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get interestRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minLoan(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get leverage(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get oracle(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class OrderDeposit extends ethereum.Event {
  get params(): OrderDeposit__Params {
    return new OrderDeposit__Params(this);
  }
}

export class OrderDeposit__Params {
  _event: OrderDeposit;

  constructor(event: OrderDeposit) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OrderModified extends ethereum.Event {
  get params(): OrderModified__Params {
    return new OrderModified__Params(this);
  }
}

export class OrderModified__Params {
  _event: OrderModified;

  constructor(event: OrderModified) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get baseAsset(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenWhitelist(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get interestRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get duration(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minLoan(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get leverage(): i32 {
    return this._event.parameters[7].value.toI32();
  }

  get oracle(): Address {
    return this._event.parameters[8].value.toAddress();
  }
}

export class OrderWithdraw extends ethereum.Event {
  get params(): OrderWithdraw__Params {
    return new OrderWithdraw__Params(this);
  }
}

export class OrderWithdraw__Params {
  _event: OrderWithdraw;

  constructor(event: OrderWithdraw) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PositionClosed extends ethereum.Event {
  get params(): PositionClosed__Params {
    return new PositionClosed__Params(this);
  }
}

export class PositionClosed__Params {
  _event: PositionClosed;

  constructor(event: PositionClosed) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get closedBy(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PositionDeposit extends ethereum.Event {
  get params(): PositionDeposit__Params {
    return new PositionDeposit__Params(this);
  }
}

export class PositionDeposit__Params {
  _event: PositionDeposit;

  constructor(event: PositionDeposit) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PositionFrozen extends ethereum.Event {
  get params(): PositionFrozen__Params {
    return new PositionFrozen__Params(this);
  }
}

export class PositionFrozen__Params {
  _event: PositionFrozen;

  constructor(event: PositionFrozen) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PositionLiquidated extends ethereum.Event {
  get params(): PositionLiquidated__Params {
    return new PositionLiquidated__Params(this);
  }
}

export class PositionLiquidated__Params {
  _event: PositionLiquidated;

  constructor(event: PositionLiquidated) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get rewardAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PositionOpened extends ethereum.Event {
  get params(): PositionOpened__Params {
    return new PositionOpened__Params(this);
  }
}

export class PositionOpened__Params {
  _event: PositionOpened;

  constructor(event: PositionOpened) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get loanAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get baseAsset(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get collateral_amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class PositionWithdrawal extends ethereum.Event {
  get params(): PositionWithdrawal__Params {
    return new PositionWithdrawal__Params(this);
  }
}

export class PositionWithdrawal__Params {
  _event: PositionWithdrawal;

  constructor(event: PositionWithdrawal) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get asset(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quantity(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokenlistAdded extends ethereum.Event {
  get params(): TokenlistAdded__Params {
    return new TokenlistAdded__Params(this);
  }
}

export class TokenlistAdded__Params {
  _event: TokenlistAdded;

  constructor(event: TokenlistAdded) {
    this._event = event;
  }

  get hash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get is_contract(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }
}

export class MarginModule__createOrderInputParamsStruct extends ethereum.Tuple {
  get whitelistId(): Bytes {
    return this[0].toBytes();
  }

  get interestRate(): BigInt {
    return this[1].toBigInt();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get minLoan(): BigInt {
    return this[3].toBigInt();
  }

  get liquidationRewardAmount(): BigInt {
    return this[4].toBigInt();
  }

  get liquidationRewardAsset(): Address {
    return this[5].toAddress();
  }

  get asset(): Address {
    return this[6].toAddress();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get currencyLimit(): i32 {
    return this[8].toI32();
  }

  get leverage(): i32 {
    return this[9].toI32();
  }

  get oracle(): Address {
    return this[10].toAddress();
  }

  get collateral(): Array<Address> {
    return this[11].toAddressArray();
  }
}

export class MarginModule__getOrderExpirationDataResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }
}

export class MarginModule__getPositionStatusResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getExpected_balance(): BigInt {
    return this.value0;
  }

  getActual_balance(): BigInt {
    return this.value1;
  }
}

export class MarginModule__order_statusResult {
  value0: boolean;
  value1: i32;

  constructor(value0: boolean, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getAlive(): boolean {
    return this.value0;
  }

  getPositions(): i32 {
    return this.value1;
  }
}

export class MarginModule__ordersResultExpirationDataStruct extends ethereum.Tuple {
  get liquidationRewardAmount(): BigInt {
    return this[0].toBigInt();
  }

  get liquidationRewardAsset(): Address {
    return this[1].toAddress();
  }

  get deadline(): BigInt {
    return this[2].toBigInt();
  }
}

export class MarginModule__ordersResult {
  value0: Address;
  value1: BigInt;
  value2: Bytes;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: Address;
  value7: i32;
  value8: i32;
  value9: Address;
  value10: BigInt;
  value11: MarginModule__ordersResultExpirationDataStruct;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: Bytes,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: Address,
    value7: i32,
    value8: i32,
    value9: Address,
    value10: BigInt,
    value11: MarginModule__ordersResultExpirationDataStruct,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set(
      "value7",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value7)),
    );
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8)),
    );
    map.set("value9", ethereum.Value.fromAddress(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromTuple(this.value11));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getId(): BigInt {
    return this.value1;
  }

  getWhitelist(): Bytes {
    return this.value2;
  }

  getInterestRate(): BigInt {
    return this.value3;
  }

  getDuration(): BigInt {
    return this.value4;
  }

  getMinLoan(): BigInt {
    return this.value5;
  }

  getBaseAsset(): Address {
    return this.value6;
  }

  getCurrencyLimit(): i32 {
    return this.value7;
  }

  getLeverage(): i32 {
    return this.value8;
  }

  getOracle(): Address {
    return this.value9;
  }

  getBalance(): BigInt {
    return this.value10;
  }

  getExpirationData(): MarginModule__ordersResultExpirationDataStruct {
    return this.value11;
  }
}

export class MarginModule__positionsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;
  value8: Address;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: BigInt,
    value8: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromAddress(this.value8));
    return map;
  }

  getOrderId(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }

  getDeadline(): BigInt {
    return this.value2;
  }

  getCreatedAt(): BigInt {
    return this.value3;
  }

  getInitialBalance(): BigInt {
    return this.value4;
  }

  getInterest(): BigInt {
    return this.value5;
  }

  getOpen(): boolean {
    return this.value6;
  }

  getFrozenTime(): BigInt {
    return this.value7;
  }

  getLiquidator(): Address {
    return this.value8;
  }
}

export class MarginModule__subjectToLiquidationExtendedResult {
  value0: boolean;
  value1: Address;
  value2: BigInt;
  value3: boolean;

  constructor(
    value0: boolean,
    value1: Address,
    value2: BigInt,
    value3: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  get_subjectToLiquidation(): boolean {
    return this.value0;
  }

  getLiquidator(): Address {
    return this.value1;
  }

  getFrozenTimestamp(): BigInt {
    return this.value2;
  }

  getLiquidated(): boolean {
    return this.value3;
  }
}

export class MarginModule__tokenlistsResult {
  value0: boolean;
  value1: boolean;

  constructor(value0: boolean, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getExists(): boolean {
    return this.value0;
  }

  getIsContract(): boolean {
    return this.value1;
  }
}

export class MarginModule extends ethereum.SmartContract {
  static bind(address: Address): MarginModule {
    return new MarginModule("MarginModule", address);
  }

  addTokenlist(tokens: Array<Address>, isContract: boolean): Bytes {
    let result = super.call(
      "addTokenlist",
      "addTokenlist(address[],bool):(bytes32)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromBoolean(isContract),
      ],
    );

    return result[0].toBytes();
  }

  try_addTokenlist(
    tokens: Array<Address>,
    isContract: boolean,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addTokenlist",
      "addTokenlist(address[],bool):(bytes32)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromBoolean(isContract),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createOrder(params: MarginModule__createOrderInputParamsStruct): BigInt {
    let result = super.call(
      "createOrder",
      "createOrder((bytes32,uint256,uint256,uint256,uint256,address,address,uint32,uint16,uint8,address,address[])):(uint256)",
      [ethereum.Value.fromTuple(params)],
    );

    return result[0].toBigInt();
  }

  try_createOrder(
    params: MarginModule__createOrderInputParamsStruct,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createOrder",
      "createOrder((bytes32,uint256,uint256,uint256,uint256,address,address,uint32,uint16,uint8,address,address[])):(uint256)",
      [ethereum.Value.fromTuple(params)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc223deposit(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "erc223deposit",
      "erc223deposit(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return result[0].toBigInt();
  }

  try_erc223deposit(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "erc223deposit",
      "erc223deposit(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAssetId(positionId: BigInt, asset: Address): BigInt {
    let result = super.call(
      "getAssetId",
      "getAssetId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(positionId),
        ethereum.Value.fromAddress(asset),
      ],
    );

    return result[0].toBigInt();
  }

  try_getAssetId(
    positionId: BigInt,
    asset: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAssetId",
      "getAssetId(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(positionId),
        ethereum.Value.fromAddress(asset),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollaterals(_orderId: BigInt): Array<Address> {
    let result = super.call(
      "getCollaterals",
      "getCollaterals(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_orderId)],
    );

    return result[0].toAddressArray();
  }

  try_getCollaterals(_orderId: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCollaterals",
      "getCollaterals(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_orderId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getIdFromTokenlist(_listId: Bytes, asset: Address): BigInt {
    let result = super.call(
      "getIdFromTokenlist",
      "getIdFromTokenlist(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_listId),
        ethereum.Value.fromAddress(asset),
      ],
    );

    return result[0].toBigInt();
  }

  try_getIdFromTokenlist(
    _listId: Bytes,
    asset: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getIdFromTokenlist",
      "getIdFromTokenlist(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(_listId),
        ethereum.Value.fromAddress(asset),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrderCollateralAssets(id: BigInt): Array<Address> {
    let result = super.call(
      "getOrderCollateralAssets",
      "getOrderCollateralAssets(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return result[0].toAddressArray();
  }

  try_getOrderCollateralAssets(
    id: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getOrderCollateralAssets",
      "getOrderCollateralAssets(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getOrderExpirationData(
    id: BigInt,
  ): MarginModule__getOrderExpirationDataResult {
    let result = super.call(
      "getOrderExpirationData",
      "getOrderExpirationData(uint256):(uint256,address,uint32)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return new MarginModule__getOrderExpirationDataResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
    );
  }

  try_getOrderExpirationData(
    id: BigInt,
  ): ethereum.CallResult<MarginModule__getOrderExpirationDataResult> {
    let result = super.tryCall(
      "getOrderExpirationData",
      "getOrderExpirationData(uint256):(uint256,address,uint32)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginModule__getOrderExpirationDataResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
      ),
    );
  }

  getOrdersLength(): BigInt {
    let result = super.call(
      "getOrdersLength",
      "getOrdersLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getOrdersLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOrdersLength",
      "getOrdersLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionActualPools(
    _positionId: BigInt,
    _feeTiers: Array<i32>,
  ): Array<Address> {
    let result = super.call(
      "getPositionActualPools",
      "getPositionActualPools(uint256,uint24[]):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_positionId),
        ethereum.Value.fromI32Array(_feeTiers),
      ],
    );

    return result[0].toAddressArray();
  }

  try_getPositionActualPools(
    _positionId: BigInt,
    _feeTiers: Array<i32>,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPositionActualPools",
      "getPositionActualPools(uint256,uint24[]):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_positionId),
        ethereum.Value.fromI32Array(_feeTiers),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPositionAssets(id: BigInt): Array<Address> {
    let result = super.call(
      "getPositionAssets",
      "getPositionAssets(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return result[0].toAddressArray();
  }

  try_getPositionAssets(id: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getPositionAssets",
      "getPositionAssets(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPositionBalances(id: BigInt): Array<BigInt> {
    let result = super.call(
      "getPositionBalances",
      "getPositionBalances(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return result[0].toBigIntArray();
  }

  try_getPositionBalances(id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPositionBalances",
      "getPositionBalances(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPositionStatus(positionId: BigInt): MarginModule__getPositionStatusResult {
    let result = super.call(
      "getPositionStatus",
      "getPositionStatus(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(positionId)],
    );

    return new MarginModule__getPositionStatusResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getPositionStatus(
    positionId: BigInt,
  ): ethereum.CallResult<MarginModule__getPositionStatusResult> {
    let result = super.tryCall(
      "getPositionStatus",
      "getPositionStatus(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(positionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginModule__getPositionStatusResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getPositionTokenlistID(_positionId: BigInt): Bytes {
    let result = super.call(
      "getPositionTokenlistID",
      "getPositionTokenlistID(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_positionId)],
    );

    return result[0].toBytes();
  }

  try_getPositionTokenlistID(_positionId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPositionTokenlistID",
      "getPositionTokenlistID(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_positionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getPositionsLength(): BigInt {
    let result = super.call(
      "getPositionsLength",
      "getPositionsLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getPositionsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPositionsLength",
      "getPositionsLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenlist(_hash: Bytes): Array<Address> {
    let result = super.call(
      "getTokenlist",
      "getTokenlist(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(_hash)],
    );

    return result[0].toAddressArray();
  }

  try_getTokenlist(_hash: Bytes): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTokenlist",
      "getTokenlist(bytes32):(address[])",
      [ethereum.Value.fromFixedBytes(_hash)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isOrderOpen(id: BigInt): boolean {
    let result = super.call("isOrderOpen", "isOrderOpen(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toBoolean();
  }

  try_isOrderOpen(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOrderOpen", "isOrderOpen(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  orderIndex(): BigInt {
    let result = super.call("orderIndex", "orderIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_orderIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("orderIndex", "orderIndex():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  order_status(param0: BigInt): MarginModule__order_statusResult {
    let result = super.call(
      "order_status",
      "order_status(uint256):(bool,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new MarginModule__order_statusResult(
      result[0].toBoolean(),
      result[1].toI32(),
    );
  }

  try_order_status(
    param0: BigInt,
  ): ethereum.CallResult<MarginModule__order_statusResult> {
    let result = super.tryCall(
      "order_status",
      "order_status(uint256):(bool,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginModule__order_statusResult(
        value[0].toBoolean(),
        value[1].toI32(),
      ),
    );
  }

  orders(param0: BigInt): MarginModule__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(address,uint256,bytes32,uint256,uint256,uint256,address,uint16,uint8,address,uint256,(uint256,address,uint32))",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new MarginModule__ordersResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBytes(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toAddress(),
      result[7].toI32(),
      result[8].toI32(),
      result[9].toAddress(),
      result[10].toBigInt(),
      changetype<MarginModule__ordersResultExpirationDataStruct>(
        result[11].toTuple(),
      ),
    );
  }

  try_orders(param0: BigInt): ethereum.CallResult<MarginModule__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(address,uint256,bytes32,uint256,uint256,uint256,address,uint16,uint8,address,uint256,(uint256,address,uint32))",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginModule__ordersResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBytes(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toAddress(),
        value[7].toI32(),
        value[8].toI32(),
        value[9].toAddress(),
        value[10].toBigInt(),
        changetype<MarginModule__ordersResultExpirationDataStruct>(
          value[11].toTuple(),
        ),
      ),
    );
  }

  positionIndex(): BigInt {
    let result = super.call("positionIndex", "positionIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_positionIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionIndex",
      "positionIndex():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionInitialCollateral(param0: BigInt): Address {
    let result = super.call(
      "positionInitialCollateral",
      "positionInitialCollateral(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_positionInitialCollateral(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionInitialCollateral",
      "positionInitialCollateral(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positions(param0: BigInt): MarginModule__positionsResult {
    let result = super.call(
      "positions",
      "positions(uint256):(uint256,address,uint256,uint256,uint256,uint256,bool,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new MarginModule__positionsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt(),
      result[8].toAddress(),
    );
  }

  try_positions(
    param0: BigInt,
  ): ethereum.CallResult<MarginModule__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(uint256):(uint256,address,uint256,uint256,uint256,uint256,bool,uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginModule__positionsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt(),
        value[8].toAddress(),
      ),
    );
  }

  predictTokenListsID(tokens: Array<Address>, isContract: boolean): Bytes {
    let result = super.call(
      "predictTokenListsID",
      "predictTokenListsID(address[],bool):(bytes32)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromBoolean(isContract),
      ],
    );

    return result[0].toBytes();
  }

  try_predictTokenListsID(
    tokens: Array<Address>,
    isContract: boolean,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "predictTokenListsID",
      "predictTokenListsID(address[],bool):(bytes32)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromBoolean(isContract),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subjectToLiquidation(positionId: BigInt): boolean {
    let result = super.call(
      "subjectToLiquidation",
      "subjectToLiquidation(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(positionId)],
    );

    return result[0].toBoolean();
  }

  try_subjectToLiquidation(positionId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "subjectToLiquidation",
      "subjectToLiquidation(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(positionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  subjectToLiquidationExtended(
    positionId: BigInt,
  ): MarginModule__subjectToLiquidationExtendedResult {
    let result = super.call(
      "subjectToLiquidationExtended",
      "subjectToLiquidationExtended(uint256):(bool,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(positionId)],
    );

    return new MarginModule__subjectToLiquidationExtendedResult(
      result[0].toBoolean(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBoolean(),
    );
  }

  try_subjectToLiquidationExtended(
    positionId: BigInt,
  ): ethereum.CallResult<MarginModule__subjectToLiquidationExtendedResult> {
    let result = super.tryCall(
      "subjectToLiquidationExtended",
      "subjectToLiquidationExtended(uint256):(bool,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(positionId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginModule__subjectToLiquidationExtendedResult(
        value[0].toBoolean(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBoolean(),
      ),
    );
  }

  tokenReceived(user: Address, value: BigInt, param2: Bytes): Bytes {
    let result = super.call(
      "tokenReceived",
      "tokenReceived(address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(param2),
      ],
    );

    return result[0].toBytes();
  }

  try_tokenReceived(
    user: Address,
    value: BigInt,
    param2: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "tokenReceived",
      "tokenReceived(address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(param2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenlists(param0: Bytes): MarginModule__tokenlistsResult {
    let result = super.call("tokenlists", "tokenlists(bytes32):(bool,bool)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return new MarginModule__tokenlistsResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
    );
  }

  try_tokenlists(
    param0: Bytes,
  ): ethereum.CallResult<MarginModule__tokenlistsResult> {
    let result = super.tryCall(
      "tokenlists",
      "tokenlists(bytes32):(bool,bool)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarginModule__tokenlistsResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenlistCall extends ethereum.Call {
  get inputs(): AddTokenlistCall__Inputs {
    return new AddTokenlistCall__Inputs(this);
  }

  get outputs(): AddTokenlistCall__Outputs {
    return new AddTokenlistCall__Outputs(this);
  }
}

export class AddTokenlistCall__Inputs {
  _call: AddTokenlistCall;

  constructor(call: AddTokenlistCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get isContract(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AddTokenlistCall__Outputs {
  _call: AddTokenlistCall;

  constructor(call: AddTokenlistCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class CreateOrderCall extends ethereum.Call {
  get inputs(): CreateOrderCall__Inputs {
    return new CreateOrderCall__Inputs(this);
  }

  get outputs(): CreateOrderCall__Outputs {
    return new CreateOrderCall__Outputs(this);
  }
}

export class CreateOrderCall__Inputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get params(): CreateOrderCallParamsStruct {
    return changetype<CreateOrderCallParamsStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class CreateOrderCall__Outputs {
  _call: CreateOrderCall;

  constructor(call: CreateOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateOrderCallParamsStruct extends ethereum.Tuple {
  get whitelistId(): Bytes {
    return this[0].toBytes();
  }

  get interestRate(): BigInt {
    return this[1].toBigInt();
  }

  get duration(): BigInt {
    return this[2].toBigInt();
  }

  get minLoan(): BigInt {
    return this[3].toBigInt();
  }

  get liquidationRewardAmount(): BigInt {
    return this[4].toBigInt();
  }

  get liquidationRewardAsset(): Address {
    return this[5].toAddress();
  }

  get asset(): Address {
    return this[6].toAddress();
  }

  get deadline(): BigInt {
    return this[7].toBigInt();
  }

  get currencyLimit(): i32 {
    return this[8].toI32();
  }

  get leverage(): i32 {
    return this[9].toI32();
  }

  get oracle(): Address {
    return this[10].toAddress();
  }

  get collateral(): Array<Address> {
    return this[11].toAddressArray();
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get receiver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class MarginSwapCall extends ethereum.Call {
  get inputs(): MarginSwapCall__Inputs {
    return new MarginSwapCall__Inputs(this);
  }

  get outputs(): MarginSwapCall__Outputs {
    return new MarginSwapCall__Outputs(this);
  }
}

export class MarginSwapCall__Inputs {
  _call: MarginSwapCall;

  constructor(call: MarginSwapCall) {
    this._call = call;
  }

  get _positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _assetId1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _whitelistId1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _whitelistId2(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _asset2(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _feeTier(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _minAmountOut(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _priceLimitX96(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }
}

export class MarginSwapCall__Outputs {
  _call: MarginSwapCall;

  constructor(call: MarginSwapCall) {
    this._call = call;
  }
}

export class MarginSwap223Call extends ethereum.Call {
  get inputs(): MarginSwap223Call__Inputs {
    return new MarginSwap223Call__Inputs(this);
  }

  get outputs(): MarginSwap223Call__Outputs {
    return new MarginSwap223Call__Outputs(this);
  }
}

export class MarginSwap223Call__Inputs {
  _call: MarginSwap223Call;

  constructor(call: MarginSwap223Call) {
    this._call = call;
  }

  get _positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _assetId1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _whitelistId1(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _whitelistId2(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _asset2(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _feeTier(): i32 {
    return this._call.inputValues[6].value.toI32();
  }
}

export class MarginSwap223Call__Outputs {
  _call: MarginSwap223Call;

  constructor(call: MarginSwap223Call) {
    this._call = call;
  }
}

export class ModifyOrderCall extends ethereum.Call {
  get inputs(): ModifyOrderCall__Inputs {
    return new ModifyOrderCall__Inputs(this);
  }

  get outputs(): ModifyOrderCall__Outputs {
    return new ModifyOrderCall__Outputs(this);
  }
}

export class ModifyOrderCall__Inputs {
  _call: ModifyOrderCall;

  constructor(call: ModifyOrderCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _whitelist(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _interestRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minLoan(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _currencyLimit(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _leverage(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get _oracle(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get _liquidationRewardAmount(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _liquidationRewardAsset(): Address {
    return this._call.inputValues[9].value.toAddress();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }
}

export class ModifyOrderCall__Outputs {
  _call: ModifyOrderCall;

  constructor(call: ModifyOrderCall) {
    this._call = call;
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OrderDepositEthCall extends ethereum.Call {
  get inputs(): OrderDepositEthCall__Inputs {
    return new OrderDepositEthCall__Inputs(this);
  }

  get outputs(): OrderDepositEthCall__Outputs {
    return new OrderDepositEthCall__Outputs(this);
  }
}

export class OrderDepositEthCall__Inputs {
  _call: OrderDepositEthCall;

  constructor(call: OrderDepositEthCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OrderDepositEthCall__Outputs {
  _call: OrderDepositEthCall;

  constructor(call: OrderDepositEthCall) {
    this._call = call;
  }
}

export class OrderDepositTokenCall extends ethereum.Call {
  get inputs(): OrderDepositTokenCall__Inputs {
    return new OrderDepositTokenCall__Inputs(this);
  }

  get outputs(): OrderDepositTokenCall__Outputs {
    return new OrderDepositTokenCall__Outputs(this);
  }
}

export class OrderDepositTokenCall__Inputs {
  _call: OrderDepositTokenCall;

  constructor(call: OrderDepositTokenCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OrderDepositTokenCall__Outputs {
  _call: OrderDepositTokenCall;

  constructor(call: OrderDepositTokenCall) {
    this._call = call;
  }
}

export class OrderDepositWETH9Call extends ethereum.Call {
  get inputs(): OrderDepositWETH9Call__Inputs {
    return new OrderDepositWETH9Call__Inputs(this);
  }

  get outputs(): OrderDepositWETH9Call__Outputs {
    return new OrderDepositWETH9Call__Outputs(this);
  }
}

export class OrderDepositWETH9Call__Inputs {
  _call: OrderDepositWETH9Call;

  constructor(call: OrderDepositWETH9Call) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _WETH9(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class OrderDepositWETH9Call__Outputs {
  _call: OrderDepositWETH9Call;

  constructor(call: OrderDepositWETH9Call) {
    this._call = call;
  }
}

export class OrderSetCollateralsCall extends ethereum.Call {
  get inputs(): OrderSetCollateralsCall__Inputs {
    return new OrderSetCollateralsCall__Inputs(this);
  }

  get outputs(): OrderSetCollateralsCall__Outputs {
    return new OrderSetCollateralsCall__Outputs(this);
  }
}

export class OrderSetCollateralsCall__Inputs {
  _call: OrderSetCollateralsCall;

  constructor(call: OrderSetCollateralsCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateral(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class OrderSetCollateralsCall__Outputs {
  _call: OrderSetCollateralsCall;

  constructor(call: OrderSetCollateralsCall) {
    this._call = call;
  }
}

export class OrderWithdrawCall extends ethereum.Call {
  get inputs(): OrderWithdrawCall__Inputs {
    return new OrderWithdrawCall__Inputs(this);
  }

  get outputs(): OrderWithdrawCall__Outputs {
    return new OrderWithdrawCall__Outputs(this);
  }
}

export class OrderWithdrawCall__Inputs {
  _call: OrderWithdrawCall;

  constructor(call: OrderWithdrawCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OrderWithdrawCall__Outputs {
  _call: OrderWithdrawCall;

  constructor(call: OrderWithdrawCall) {
    this._call = call;
  }
}

export class PositionCloseCall extends ethereum.Call {
  get inputs(): PositionCloseCall__Inputs {
    return new PositionCloseCall__Inputs(this);
  }

  get outputs(): PositionCloseCall__Outputs {
    return new PositionCloseCall__Outputs(this);
  }
}

export class PositionCloseCall__Inputs {
  _call: PositionCloseCall;

  constructor(call: PositionCloseCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get autoWithdraw(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class PositionCloseCall__Outputs {
  _call: PositionCloseCall;

  constructor(call: PositionCloseCall) {
    this._call = call;
  }
}

export class PositionDepositCall extends ethereum.Call {
  get inputs(): PositionDepositCall__Inputs {
    return new PositionDepositCall__Inputs(this);
  }

  get outputs(): PositionDepositCall__Outputs {
    return new PositionDepositCall__Outputs(this);
  }
}

export class PositionDepositCall__Inputs {
  _call: PositionDepositCall;

  constructor(call: PositionDepositCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get idInWhitelist(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class PositionDepositCall__Outputs {
  _call: PositionDepositCall;

  constructor(call: PositionDepositCall) {
    this._call = call;
  }
}

export class PositionWithdrawCall extends ethereum.Call {
  get inputs(): PositionWithdrawCall__Inputs {
    return new PositionWithdrawCall__Inputs(this);
  }

  get outputs(): PositionWithdrawCall__Outputs {
    return new PositionWithdrawCall__Outputs(this);
  }
}

export class PositionWithdrawCall__Inputs {
  _call: PositionWithdrawCall;

  constructor(call: PositionWithdrawCall) {
    this._call = call;
  }

  get positionId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get asset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PositionWithdrawCall__Outputs {
  _call: PositionWithdrawCall;

  constructor(call: PositionWithdrawCall) {
    this._call = call;
  }
}

export class SetOrderStatusCall extends ethereum.Call {
  get inputs(): SetOrderStatusCall__Inputs {
    return new SetOrderStatusCall__Inputs(this);
  }

  get outputs(): SetOrderStatusCall__Outputs {
    return new SetOrderStatusCall__Outputs(this);
  }
}

export class SetOrderStatusCall__Inputs {
  _call: SetOrderStatusCall;

  constructor(call: SetOrderStatusCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOrderStatusCall__Outputs {
  _call: SetOrderStatusCall;

  constructor(call: SetOrderStatusCall) {
    this._call = call;
  }
}

export class TakeLoanCall extends ethereum.Call {
  get inputs(): TakeLoanCall__Inputs {
    return new TakeLoanCall__Inputs(this);
  }

  get outputs(): TakeLoanCall__Outputs {
    return new TakeLoanCall__Outputs(this);
  }
}

export class TakeLoanCall__Inputs {
  _call: TakeLoanCall;

  constructor(call: TakeLoanCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _collateralIdx(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _collateralAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TakeLoanCall__Outputs {
  _call: TakeLoanCall;

  constructor(call: TakeLoanCall) {
    this._call = call;
  }
}

export class TokenReceivedCall extends ethereum.Call {
  get inputs(): TokenReceivedCall__Inputs {
    return new TokenReceivedCall__Inputs(this);
  }

  get outputs(): TokenReceivedCall__Outputs {
    return new TokenReceivedCall__Outputs(this);
  }
}

export class TokenReceivedCall__Inputs {
  _call: TokenReceivedCall;

  constructor(call: TokenReceivedCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TokenReceivedCall__Outputs {
  _call: TokenReceivedCall;

  constructor(call: TokenReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class Withdraw223Call extends ethereum.Call {
  get inputs(): Withdraw223Call__Inputs {
    return new Withdraw223Call__Inputs(this);
  }

  get outputs(): Withdraw223Call__Outputs {
    return new Withdraw223Call__Outputs(this);
  }
}

export class Withdraw223Call__Inputs {
  _call: Withdraw223Call;

  constructor(call: Withdraw223Call) {
    this._call = call;
  }

  get asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Withdraw223Call__Outputs {
  _call: Withdraw223Call;

  constructor(call: Withdraw223Call) {
    this._call = call;
  }
}
